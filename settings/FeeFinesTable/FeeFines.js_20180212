import React from 'react';
import PropTypes from 'prop-types';
import uuid from 'uuid';
import Owners from './Owners';
import EditableList from './EditableList'
import CopyOwnerModal from './CopyOwnerModal';

const INITIAL_RESULT_COUNT = 100;
const RESULT_COUNT_INCREMENT = 100;

let ownerid = 0;
let notEmptyList = [];

class FeeFines extends React.Component {

	static propTypes = {
   	resources: PropTypes.shape({
      	feefines: PropTypes.shape({
	      	records: PropTypes.arrayOf(PropTypes.object),
	      }),
	      owners: PropTypes.shape({
   	   	records: PropTypes.arrayOf(PropTypes.object),
	      }),
   	}).isRequired,
    	location: PropTypes.shape({
      	search: PropTypes.string,
		}).isRequired,
    	history: PropTypes.shape({
      	push: PropTypes.func.isRequired,
    	}).isRequired,
		mutator: PropTypes.shape({
      	feefines: PropTypes.shape({
      		POST: PropTypes.func.isRequired,
            PUT: PropTypes.func.isRequired,
            DELETE: PropTypes.func.isRequired,
      	}),
    	}).isRequired,
		okapi: PropTypes.object,
	};

	static manifest = Object.freeze({
   	userCount: { initialValue: INITIAL_RESULT_COUNT },
    	feefines: {
      	type: 'okapi',
      	records: 'feefines',
			GET: {
				path: 'feefines?query=(ownerid=%{activeRecord.ownerid})&limit=100'
        	},
			PUT: {
				path: 'feefines/%{activeRecord.id}',
			},
         DELETE: {
         	path: 'feefines/%{activeRecord.id}',
         },
   	},
   	owners: {
      	type: 'okapi',
	      records: 'owners',
	      recordsRequired: '%{userCount}',
	      perRequest: RESULT_COUNT_INCREMENT,
	      path: 'owners',
   	},
		allfeefines: {
			type: 'okapi',
         records: 'feefines',
         recordsRequired: '%{userCount}',
         perRequest: RESULT_COUNT_INCREMENT,
         path: 'feefines',
		},
      activeRecord: {},
	});

   constructor(props) {
      super(props);

		this.state = {
			searchTerm: '*',
			openModal: false,
			edit: "true",
		}

	   this.onCreateType = this.onCreateType.bind(this);
      this.onDeleteType = this.onDeleteType.bind(this);
		this.onUpdateType = this.onUpdateType.bind(this);

		this.onChangeOwner = this.onChangeOwner.bind(this);
		this.onChangeEdit = this.onChangeEdit.bind(this);
		this.closeModal = this.closeModal.bind(this);
		this.copyOwner = this.copyOwner.bind(this)

		const logger = props.stripes.logger;
    	this.log = logger.log.bind(logger);

   }

	onCreateType(type) {
      type.ownerid = ownerid;
      if(type.allowmanualcreation==""){type.allowmanualcreation = true}
      this.props.mutator.feefines.POST(type);
   }

	onChangeEdit(value) {
		this.setState({edit: value});
	}

	onUpdateType(type) {
      this.props.mutator.activeRecord.update({ id: type.id });
      delete type.metadata;
      this.props.mutator.feefines.PUT(type);
   }

   onDeleteType(typeId) {
      this.props.mutator.activeRecord.update({ id: typeId });
      this.props.mutator.feefines.DELETE(this.props.resources.feefines.records.find(t => t.id === typeId));
   }

   closeModal() {
      this.setState({ openModal: false});
   }

	onChangeOwner(e) {
      ownerid = e.target.value;
      this.setState({ searchTerm: ownerid });
		this.props.mutator.activeRecord.update({ownerid: ownerid});
      const ids = [];
      notEmptyList.forEach(owner => {
         ids.push(owner.id)
      });
      if(ids.indexOf(ownerid)<0&&ownerid!="*"&&ids.length!=0) {
         this.setState({openModal: true})
      }
   }

	copyOwner(selectedOwner) {
		const feefines = (this.props.resources.allfeefines || {}).records || [];
		feefines.forEach( feefine => {
			if(feefine.ownerid == selectedOwner) {
				feefine.id = uuid();
				feefine.ownerid = ownerid;
      		this.props.mutator.feefines.POST(feefine);
			}
		});
	}

	componentWillMount() {
		this.setState({ searchTerm: "*" });
		this.props.mutator.activeRecord.update({ownerid: '*'});
	}

   render () {
		// Cambia botones de Editable list
   	const suppressor = {
  			delete: () => true,
   		edit: () => false,
      };

		const resources = this.props.resources;
		const feefines = (resources.feefines || {}).records || [];
		const data = (resources.allfeefines || {}).records || [];
		const owners = (resources.owners || {}).records || [];


		const ownerList = [];
		notEmptyList = [];


      data.forEach( feefine => {
			if(ownerList.indexOf(feefine.ownerid) < 0) {
				ownerList.push(feefine.ownerid)
			}
      });
		owners.forEach(owner => {
			if(ownerList.indexOf(owner.id) >=0 ) {
				notEmptyList.push(owner)
			}
		});

		return (<div>
					FEE/FINE OWNER<Owners dataOptions={owners} onChange={this.onChangeOwner}/>
					<EditableList
						{...this.props}
						edit={this.state.edit}
						owner={this.state.searchTerm}
						contentData={feefines}
						createButtonLabel="+ Add new"
                  visibleFields={['feefinetype', 'defaultamount', 'allowmanualcreation', 'taxvat']}
					   itemTemplate={{ id: 'number', feefinetype: 'string' , defaultamount: 'string', allowmanualcreation: 'string', taxvat: 'string'}} 
					   onUpdate={this.onUpdateType}
					   onDelete={this.onDeleteType}
					   onCreate={this.onCreateType}
						nameKey={this.props.nameKey}
					   actionSuppression={suppressor}
            	/>
					<CopyOwnerModal
						log={this.log}
						openWhen={this.state.openModal}
						owners={notEmptyList}
						onContinue={this.copyOwner}
						onChangeEdit={this.onChangeEdit}
						cancel={this.closeModal}
						closeCB={this.closeModal}
					/>
				</div>
		)
   }
}

export default FeeFines;
